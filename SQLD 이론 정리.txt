1-1
데이터 모델링의 이해

1. 데이터 모델의 이해
데이터 모델링이란?
 - 약속된 표기법에 의해 규칙을 가지고 표기하며, 현실세계의 데이터에 대해서 표현하는 것으로 이해할 수 있다.
 - 정보시스템을 구축하기 위한 데이터 관점의 업무 분석 기법으로 데이터베이스를 구축하기 위한 분석/설계의 과정을 말한다.

모델링의 특징
 - 추상화 : 현실세계를 일정한 형식에 맞추어 표현 (모형화, 가설적)
 - 단순화 : 복잡한 현실을 제한된 언어나 표기법을 통해 이해하기 쉽게 함
 - 정확화 : 애매모호함을 배제하고 누구나 이해가 가능하도록 정확하게 현상을 기술

데이터모델링의 유의점
 - 중복성
    데이터베이스가 여러장소에 같은 정보를 저장하는 잘못을 하지 않도록 해야한다.
 - 비유연성
    데이터모델이 수시로 변경되면 유지보수의 어려움을 가중시킨다.
    데이터의 정의를 데이터의 사용 프로세스와 분리함으로써 데이터 혹은 프로세스의 작은 변화가 영향을 끼치는 가능성을 줄인다.
 - 비일관성
    데이터와 데이터 간의 "상호" 연관 관계에 대해 명확하게 정의해야 한다.
    사용자가 처리하는 프로세스 혹은 이와 관련된 프로그램과 테이블의 연계성을 높이는 것은 좋지 않다.

데이터 모델링의 3단계
1. 개념적 모델링
 - 추상화 수준이 높고 업무중심적이고 포괄적인 수준의 모델링 (추상적)
 - 전사적 데이터 모델링
 - EA(Enterprise Architect) 수립

2. 논리적 데이터 모델링
 - 시스템으로 구축하고자 하는 업무에 대해 key, 속성, 관계 등을 정확하게 표현
 - 재사용성이 높음
 - 정규화

3. 물리적 데이터 모델링
 - 실제로 데이터베이스에 이식할 수 있도록 성능, 저장 등 물리적인 성격을 고려하여 설계 (구체적)

ANSI / SPARC 데이터베이스 스키마 구조 3단계
 - 외부 스키마 (External Schema)
    외부 화면 및 사용자 인터페이스(view)
    사용자나 응용 프로그래머가 각 개인의 입장에서 필요로하는 데이터베이스의 논리적 구조를 정의
 - 개념 스키마 (Conceptual Schema)
    전체 관점의 통합적 표현
 - 내부 스키마 (Internal Schema)
    물리적 저장장치 입장에서 본 데이터베이스 구조

2. 엔터티
엔터티(Entity)란?
 - 데이터의 집합을 의미하며, 명사, 업무상 관리가 필요한 관심사, 저장이 되기 위한 어떤 것(Thing)을 말한다.

엔터티의 특징
 - 반드시 해당 업무에서 필요하고, 관리하고자 하는 정보여야 한다.
 - 유일한 식별자에 의해 식별이 가능해야 한다.
 - 영속적으로 존재하는 인스턴스의 집합이어야 한다. (인스턴스 2개 이상)
 - 업무 프로세스에 의해 이용되어야 한다.
 - 반드시 속성을 가져야 한다.
 - 다른 엔터티와 최소 한 개 이상의 관계가 있어야 한다.

(인스턴스 : 행, 데이터베이스에 저장된 데이터 내용의 전체 집합)

엔터티의 분류
1. 발생 시점에 따른 분류
 - 기본엔터티
     업무에 원래 존재하는 정보
     다른 엔터티와의 관계에 의해 생성되지 않고 독립적으로 생성
     타 엔터티의 부모 역할
     주식별자를 상속받지 않고, 고유한 주식별자를 가짐
     예 - 고객, 상품, 사원
 - 중심엔터티
     기본엔터티로부터 발생
     다른 엔터티와의 관계를 통해 행위 엔터티를 생성
     예 - 주문, 체결, 취소, 계약 등
 - 행위엔터티
     두 개 이상의 부모 엔터티로부터 발생
     예 - 주문내역, 취소내역, 사원변경이력 등

2. 유무형에 따른 분류
 - 유형 엔티티
     지속적으로 사용되는 엔터티
     물리적인 형태가 있음
     예 - 학생, 선생님, 사원 등
 - 개념 엔터티
     물리적 형태가 없이 개념적으로 사용되는 엔터티
     예 - 보험 상품, 조직 등
 - 사건 엔터티
    업무를 수행하면서 생성되는 엔터티
    예 - 주문, 청구, 수수료 등

엔터티의 명명
 - 현업 사용 용어부터 시작
 - 가능하면 약어 자제
 - 단수 명사
 - 모든 엔터티에 유일한 이름 부여
 - 생성 의미대로 이름 부여


3. 속성(Attribute)
속성이란?
업무에서 필요로 하는 인스턴스에서 관리하고자 하는 더 이상 분리되지 않는 최소의 데이터 단위

속성의 분류
- 기본속성
     업무로부터 추출한 모든 속성
- 설계속성
     새로 만들거나 정의하는 속성
     예 - 코드, 일련번호 등
- 파생속성
     다른 속성에 영향을 받아 생성되는 속성
     예 - 계산값 등

도메인(Domain)이란
 - 각 속성이 가질수있는 값의 범위
 - 엔터티 내에서 속성에 대한 데이터 타입과 크기, 제약사항을 지정한다.

4. 관계
관계(Relationship)
 - 엔터티간의 관련성을 말하며 행위로서 서로에게 연관성이 부여된 상태를 말한다.

관계의 분류
 - 존재에 의한 관계
     엔터티간의 상태를 의미
     예 - 사원과 소속, 학생과 학교 등
 - 행위에 의한 관계
     엔터티 간에 어떠한 행위가 있는 것
     예 - 은행 계좌 개설, 상품 주문 배송 등

관계의 표기법
 - 관계명(Membership) : 관계의 이름
 - 관계차수(Cardinality) : 1:1, 1:M, M:N
 - 관계선택사양(Optionality) : 필수관계, 선택관계


5. 식별자(Identifier)
식별자란?
 - 엔터티에는 반드시 하나의 유일한 식별자가 존재하며, 엔터티를 구분짓는 논리적인 이름을 말한다.

주식별자의 특징
 - 유일성
     주식별자에 의해 엔터티 내에 모든 인스턴스들을 유일하게 구분한다.
 - 최소성
    주식별자를 구성하는 속성의 수는 유일성을 만족하는 최소의 수가 되어야 한다.
 - 불변성
     주식별자가 한 번 특정 엔터티에 지정되면 그 식별자의 값은 변하지 않아야한다.
 - 존재성
     주식별자가 지정되면 반드시 데이터 값이 존재해야한다.

식별자의 종류
 - 대표성 여부
    주 식별자
     - 엔터티 내에서 각 어커런스를 구분할 수 있는 구분자
     - 타 엔터티와 참조관계를 연결할 수 있는 식별자
    보조 식별자
     - 엔터티 내에서 각 어커런스를 구분할 수 있는 구분자
     - 대표성이 없어 참조관계 연결은 못함
 - 스스로 생성 여부
    내부 식별자
      - 엔터티 내부에서 스스로 만들어지는 식별자
    외부 식별자
      - 타 엔터티와의 관계를 통해 타 엔터티로부터 받아오는 식별자
 - 속성의 수
    단일 식별자 : 하나의 속성으로 구성된 식별자
    복합 식별자 : 둘 이상의 속성으로 구성된 식별자
 - 대체 여부 
    본질 식별자 : 업무에 의해 만들어지는 식별자
    인조 식별자 : 인위적으로 만들어진 식별자

식별자와 비식별자의 관계
 - 식별자 관계
     목적 : 강한 연결관계 표현
     자식 주식별자 영향 : 자식 주식별자의 구성에 포함됨
     표기법 : 실선 표현
     연결 고려사항
       - 반드시 부모 엔터티에 종속
       - 자식 주식별자 구성에 부모 주식별자 "포함" 필요
       - 상속받은 주식별자 속성을 타 엔터티에 "이전" 필요
 - 비식별자 관계
     목적 : 약한 연결관계 표현
     자식 주식별자 영향 : 자식 일반 속성에 포함
     표기법 : 점선 표현
     연결 고려사항
       - 약한 종속관계
       - 자식 주식별자 구성을 "독립적"으로 구성
       - 자식 주식별자 구성에 부모 주식별자 "부분" 필요
       - 상속받은 주식별자 속성을 타엔터티에 "차단" 필요
       - 부모쪽은 관계 참여가 "선택관계"


1-2
데이터 모델과 성능

1. 성능데이터 모델링의 개요
성능 데이터 모델링이란?
 - 데이터베이스 성능 향상을 위한 목적으로 설계단계의 데이터 모델링 때부터 성능과 관련된 사항이 데이터 모델링에 반영될 수 있도록 하는 것이다.
 - 주로 데이터 모델 구조, 대용량의 데이터, 인덱스의 특성을 고려한다.

성능 데이터 모델링 고려 순서
1. 데이터 모델링시 정규화를 정확하게 수행
2. 데이터베이스 용량 산정을 수행
3. 데이터베이스에서 발생되는 트랜잭션의 유형 파악
4. 용량과 트랜잭션의 유형에 따라 반정규화 수행
5. 이력모델 조정, PK/FK 조정, 슈퍼타입/서브타입 조정 등 조정작업 수행
6. 성능 관점에서 데이터 모델 검증

2. 정규화(Normalization)와 성능
정규화란?
 - 다향한 유형의 검사를 통해 데이터 모델을 더 구조화하고 개선시켜 나가는 절차이다.
 - 중복성 제거, 관심사별로 처리 등 데이터베이스의 성능을 향상시킬 수 있다.

1차 정규화 : 속성의 원자성 확보, 다중값 속성을 분리
2차 정규화 : 부분함수 종속성 제거, 일부 기본키에만 종속된 속성을 분리, 기본키가 하나의 칼럼일때 생략 가능
3차 정규화 : 이행함수 종속성 제거, 서로 종속관계가 있는 일반 속성을 분리, 주식별자와 관련성이 가장 낮음
보이스코드 정규화(BCNF : Boyce-Codd Normal Form) : 후보키가 기본키 속성 중 일부에 함수적 종속일 때 다수의 주 식별자를 분리
4차, 5차 정규화 : 다치 종속 분리, 결합 종속 분리

정규화를 통한 성능 향상 요소
 - 입력/수정/삭제 시 성능은 항상 향상
 - 유연성 증가 : High Cohesion & Loose Coupling 원칙에 충실
 - 개념 세분화를 통한 재활용 가능성 증가
 - 데이터 중복 최소화

정규화를 통한 성능 저하 요소
 - 조회시 처리 조건에 따라 성능 저하가 발생할 수도 있다.
 - 대표적으로 Join을 유발하여 CPU와 메모리를 많이 사용하게 된다.
 해결방법
    - 반정규화를 통해 문제 해결 가능
    - 인덱스를 사용하여 Join 연산을 수행하면 인덱스의 수를 줄일 수 있음

반정규화와 성능
반정규화란?
 - 데이터의 중복을 허용하여 조인을 줄이는 데이터베이스 성능 향상 방법으로, 정규화된 엔터티, 속성, 관계에 대해 시스템 성능 향상과 개발과 운영의 단순화를 위해 중복, 통합, 분리 등을 수행하는 데이터 모델링 기법이다.
 - 데이터의 무결성이 깨질 수 있는 위험을 무릅쓰고 반정규화를 적용하여 입출력 성능을 향상시킴

테이블의 반정규화
1. 테이블 병합
 - 1:1 관계 테이블 병합
 - 1:M 관계 테이블 병합
 - 슈퍼/서브타입 테이블 병합

2. 테이블 분할
 - 수직 분할 : 칼럼단위, 테이블 1:1로 분리
 - 수평분할 : 로우 단위로 분리

3. 테이블 추가 
 - 중복 테이블 추가
     - 업무나 서버가 다를 때 중복 테이블 생성(원격조인 제거)
 - 통계 테이블 추가
     - SUM, AVG 등 미리 계산하여 조회시 성능 향상
 - 이력 테이블 추가
 - 부분 테이블 추가
     - 자주 이용하는 칼럼들을 모아 별도 테이블 생성

칼럼의 반정규화
1. 중복칼럼 추가 
 - 중복 칼럼 위치 -> 조인 감소
2. 파생칼럼 추가 
 - 필요한 값 미리 계산하여 칼럼 추가 -> 계산에 의한 성능 저하 예방
3. 이력테이블 칼럼 추가
 - 기능성 칼럼(최근값 여부, 시작 및 종료일자 등 추가)
4. PK에 의한 칼럼 추가
 - 일반 속성으로 PK데이터 추가
5. 응용 시스템 오작동을 위한 칼럼 추가
 - 이전 데이터 임시적 중복 보관

관계의 반정규화
 - 중복 관계 추가 : Join 방지
 - 데이터의 무결성 보장
 - 데이터 처리 성능 향상



SQL 활용

Natural JOIN
 - 두 테이블간 동일한 칼럼 이름을 가진 경우에 대해 EQUI JOIN을 수행한다.
 - USING과 ON 조건을 줄 수 없다.
 - Join에 사용된 칼럼은 같은 데이터 타입이어야 한다.
 - 별명이나 테이블명 사용 불가능

서브쿼리
4-3 동작 방식에 따른 서브쿼리 분류
 - Un-Correlated(비연관) 서브쿼리
     - 서브쿼리가 메인쿼리 칼럼을 갖고 있지 않은 형태
     - 메인쿼리에 값을 제공하기 위한 목적으로 주로 사용된다.
 - Correlated(연관) 서브쿼리
     - 서브쿼리가 메인쿼리 칼럼을 가지고 있는 형태
     - 메인쿼리가 먼저 수행되어 읽힌 데이터를 서브쿼리에서 조건이 맞는지 확인하고자 할때 주로 사용된다.

4-5 스칼라 서브쿼리  
 - 값 하나 (한 행 또는 한 칼럼)을 반환하는 서브쿼리

4-7 VIEW의 장점 
 - 독립성
 - 편리성
 - 보안성

8-3 
프로시저와 트리거

프로시저 (Procedure) 
 - CREATE Procedure 문법 사용
 - EXECUTE 명령어로 실행
 - COMMIT, ROLLBACK 실행 가능

트리거 (TRIGGER) 
 - CREATE Trigger 문법 사용
 - 생성 후 자동으로 실행됨
 - COMMIT, ROLLBACK 실행 안됨


SQL 최적화 기본 원리
1. 옵티마이저와 실행 계획

옵티마이저란?
 - 사용자가 질의한 SQL문에 대해 최적의 실행방법을 결정하는 역할을 수행한다.
 - 최적의 실행방법을 실행계획(Execution Plan)이라 한다.
 - 어떤 방법으로 처리하는 것이 동일한 일을 최소의 일량으로 처리할 수 있을지 결정한다.

옵티마이저 종류
 - 규칙 기반 옵티마이저
     - 우선순위 규칙에 따라 실행계획을 실행하며 인덱스가 있으면 반드시 인덱스를 사용한다.
 - 비용 기반 옵티마이저
     - 처리비용이 가장 적은 실행계획을 선택한다.
     - 데이터 딕셔너리(Data Dictionary)의 통계정보나 DBMS의 차이로 같은 쿼리도 다른 실행계획이 생성될 수 있다. 
     - 실행계획의 예측 및 제어가 어렵다.

SQL문 실행 순서
1. 파싱(Parsing) : SQL 문법 검사 및 구문 분석 작업
2. 실행(Execution) : 옵티마이저의 실행 계획에 따라 실행
3. 인출(Fetch) : 데이터를 읽어 전송

옵티마이저 엔진 
 - 질의 변환기 
     - 사용자가 작성한 SQL문을 처리하기 용이한 형태로 변환하는 모듈
 - 대안 계획 생성기 
     - 동일한 결과를 생성하는 다양한 대안 계획을 생성하는 모듈
     - 대안 계획은 연산의 적용 순서 변경, 연산방법 변경, 조인 순서 변경등을 통해 생성
     - 대안 계획의 생성이 많아지면 최적화를 수행하는 시간이 그만큼 오래 걸린다.
 - 비용 예측기
     - 생성된 대안 계획의 비용을 예측하는 모듈

실행계획이란?
 - SQL에서 요구한 사항을 처리하기 위한 절차와 방법
 - 다양한 실행계획(처리방법)마다 성능(실행시간)은 서로 다를 수 있다.
 - 옵티마이저는 최적의 실행계획을 생성하는 것이다.

실행계획 구성 요소
 - 조인 순서 (Join Order)
 - 조인 기법 (Join Method) 
 - 엑세스 기법 (Access Method) 
 - 최적화 정보 (Optimization information) : 실행 계획의 각 단계마다 예상 비용 표시
     - Cost : 상대적인 비용 정보
     - Card : Cardinality의 약자 (결과 집합의 건수)
     - Bytes : 결과 집합이 차지하는 메모리의 양 (바이트)

연산(Operation) : 여러 조작을 통해 원하는 결과를 얻어내는 일련의 작업

SQL 처리 흐름도란?
 - SQL의 내부적인 처리 절차를 시각적으로 표현한 도표로 실행계획을 시각화한 것이다.
 - 조인 순서, 엑세스 기법과 조인 기법 등을 표현 가능하다.
 - 엑세스 건수, 조인 시도 건수, 테이블 엑세스 건수, 성공 건수, 스캔방식 등 표현


인덱스 기본
인덱스란 : 검색 조건에 부합하는 데이터를 효과적으로 검색할 수 있도록 돕는 기능

인덱스의 종류
 - 트리 기반 인덱스
 - 클러스터형 인덱스

전체 테이블 스캔이란?
 - 테이블에 존재하는 모든 데이터를 읽어가면서 조건에 맞으면 결과로 추출하고 아니면 버리는 방식으로 검색한다.

인덱스 스캔이란?
 - 인덱스를 구성하는 칼럼의 값을 기반으로 데이터 추출
 - 인덱스를 읽어 ROWID를 찾고 해당 데이터를 찾기 위해 테이블을 읽음
 - 일반적으로 인덱스 칼럼 순서로 정렬되어 출력
 - 적은 데이터를 조회할 때 유리

인덱스 스캔 종류
1. 인덱스 유일 스캔
2. 인덱스 범위 스캔
3. 인덱스 역순 범위 스캔
4. 기타 : 인덱스 전체 스캔, 인덱스 고속 전체 스캔, 인덱스 스킵 스캔


조인 수행 원리
조인이란?
 - 두 개 이상의 테이블을 하나의 집합으로 만드는 연산이다.





















https://upgrade-j.tistory.com/entry/SQLD-1-1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EB%A7%81%EC%9D%98-%EC%9D%B4%ED%95%B4?category=1023321









