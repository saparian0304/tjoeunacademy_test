====================================
22.04.25 월 (선행 1일차)

환경변수(변할 수 있는 수)
JAVA_HOME
-> 자바 설치된 경로

Path
-> 어디서든 해당경로의 파일 실행
%JAVA_HOME%\bin 
	(변환)-> 자바 설치경로\bin\java.exe

GUI : Graphic User Interface
Inter + face
 ~사이에 + 표면

CLI : Command Line Interface

자료형 변수명;

변수/메서드/클래스 명명 규칙
1. 클래스명 첫자를 대문자로
2. 여러 단어로 이루어진 경우 
-> 두번째 이후 단어의 첫자 : 대문자
학생번호 : studentNumber (Camel 표기법, 주로 class명, 메서드명)
-> 단어와 단어 사이에 '_'
학생번호 : student_number (Snake 표기법, 주로 변수명)
3. 상수(항상 같은 수)는 모두 대문자
-> 원주율 : PI


자료형
자료 : 데이터
형 : 타입
데이터타입, 타입, 데이터형, 자료타입, 형...

기본자료형
- 정수(-,+,0), 실수(소수점 있는 수), 논리(참/거짓)
정수 (byte, short, int, long, char)
int : -21억 ~ +21억
long : 21억이 넘는다(긴)
실수 (double)
논리 (boolean) : true/false 둘 중 하나의 값

char (character)
- 문자
- 작은따옴표(')로 감싸서 표현

참조(reference)자료형


줄바꿈이 포함된 상태
안녕하세요
반갑습니다

저는 "홍길동"입니다.

====================================
22.04.26 화 (선행 2일차)

파일의 종류
 - 텍스트
 - 바이너리

변수 (variable, 變數)
vary + able, variety


구조(structure)

int < long < double 


ctrl + d : 코드 한줄 삭제
ctrl + alt + 방향키 : 선택영역 코드 복사

★★
비교연산자 : 결과값은 항상 boolean(true/false)으로 나옴

a == b 같은지 비교
a != b 같지 않은지 비교

&&와 &의 차이
&& : 좌측항이 false이면 무조건 false이기때문에 우측항은 연산하지 않음
&& : 좌측항이 false여도 우측항을 연산하고 결과값 리턴

||와 |의 차이
|| : 좌측항이 true이면 무조건 true이기때문에 우측항은 연산하지 않음
| : 좌측항이 true여도 우측항을 연산하고 결과값 리턴

=====================================
22.04.27 수 (선행 3일차)

연산
* 대입연산
=, +=, -=, *=, /= ....

* 산술연산
+, -, *, /, %

* 증감연산
++, --

* 비교연산
<, >, <=, >=, ==, !=

* 논리연산
&&, ||, !

* 삼항연산
조건 ? 값1(true) : 값2(false)


if문
if (조건문1-결과값이 boolean!) {
    실행문 1
} else if (조건문2 - 결과값boolean) {
    실행문 2
} else {
    실행문 3
}

else문은 있을 수도 있고, 없을 수도 있음


자동 import 단축키 : ctrl + shift + O (알파벳 O)

폰트 : D2 coding  (Il1| 구분이 쉬움)

자바 버전
1.0
1.2 -> java2
1.5 -> java5
1.7 -> java7 (아직 쓰고 있는 곳 많음)
1.8 (★) (제일 많이 쓰고 있음)
9
10
11 (★)
...
18


for문 구조

for (초기화식(1) ; 조건식(2) ; 증감식(4)) { 
    실행문(3)
}

for문 순서
(1) -> (2) -> (3) -> (4)
    -> (2) -> (3) -> (4)
    -> (2) -> (3) -> (4)
    -> (2) -> (3) -> (4) (조건식이 true일 동안 반복)


while문 구조

while (조건식) {
    실행문	(조건식이 true일 동안 반복)
}

자칫하면 무한반복(loop)에 빠질 수 있음


for : 반복횟수가 정해져 있을 때
while : 반복횟수가 정해져 있지 않을 때


반복문 이름 부여
outer : 
for ( ; ; ) { 

    inner :
    for(   ){
    break outer;
    }

}

for문에 이름을 부여(outer, inner)해서 break문을 사용할 경우 중첩 for문을 한꺼번에 나갈 수 있음

===================================
22.04.28 목 (선행 4일차)
복습방법
클라우드스터딩 : https://cloudstudying.kr/
강의 -> "자바 입문하기!"

컴퓨터 과학 (CS, Computer Science)
 - 네트워크, 자료구조, 알고리즘, 데이터베이스


컴퓨터언어 (compile, interpreter)
compile
 - 소스 -> 기계어(실행)
 - C, C++
 - 속도가 빠름
 - 유지보수 어려움, 번거롭다 (코드 하나 수정해도 "컴파일->실행" 과정을 거쳐야함)

JIT (Just In Time) : Java가 여기에 속함 (+ 현재 버전의 Python, JavaScript)
 - 소스 -> 컴파일(바이너리) -> JVM(실행)
 - compile 장점 + interpreter 장점
 - compile 단점 + interpreter 단점

interpreter
 - 소스(실행) => 소스의 한줄씩 번역해서 실행
 - Python, JavaScript
 - 속도가 느림
 - 유지보수가 쉬움 (compile 언어에 비해서)


여러줄 주석 단축키 : Ctrl+Shift+'/' -> 잘 안씀 (그냥 Ctrl+'/' 를 사용함)

웹개발시에는 패키지를 꼭 만들어야한다! (default package 사용X)

메서드 실행(호출) = method call (같은 의미)