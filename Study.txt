====================================
22.04.25 월 (선행 1일차)

환경변수(변할 수 있는 수)
JAVA_HOME
-> 자바 설치된 경로

Path
-> 어디서든 해당경로의 파일 실행
%JAVA_HOME%\bin 
	(변환)-> 자바 설치경로\bin\java.exe

GUI : Graphic User Interface
Inter + face
 ~사이에 + 표면

CLI : Command Line Interface

자료형 변수명;

변수/메서드/클래스 명명 규칙
1. 클래스명 첫자를 대문자로
2. 여러 단어로 이루어진 경우 
-> 두번째 이후 단어의 첫자 : 대문자
학생번호 : studentNumber (Camel 표기법, 주로 class명, 메서드명)
-> 단어와 단어 사이에 '_'
학생번호 : student_number (Snake 표기법, 주로 변수명)
3. 상수(항상 같은 수)는 모두 대문자
-> 원주율 : PI


자료형
자료 : 데이터
형 : 타입
데이터타입, 타입, 데이터형, 자료타입, 형...

기본자료형
- 정수(-,+,0), 실수(소수점 있는 수), 논리(참/거짓)
정수 (byte, short, int, long, char)
int : -21억 ~ +21억
long : 21억이 넘는다(긴)
실수 (double)
논리 (boolean) : true/false 둘 중 하나의 값

char (character)
- 문자
- 작은따옴표(')로 감싸서 표현

참조(reference)자료형


줄바꿈이 포함된 상태
안녕하세요
반갑습니다

저는 "홍길동"입니다.

====================================
22.04.26 화 (선행 2일차)

파일의 종류
 - 텍스트
 - 바이너리

변수 (variable, 變數)
vary + able, variety


구조(structure)

int < long < double 


ctrl + d : 코드 한줄 삭제
ctrl + alt + 방향키 : 선택영역 코드 복사

★★
비교연산자 : 결과값은 항상 boolean(true/false)으로 나옴

a == b 같은지 비교
a != b 같지 않은지 비교

&&와 &의 차이
&& : 좌측항이 false이면 무조건 false이기때문에 우측항은 연산하지 않음
&& : 좌측항이 false여도 우측항을 연산하고 결과값 리턴

||와 |의 차이
|| : 좌측항이 true이면 무조건 true이기때문에 우측항은 연산하지 않음
| : 좌측항이 true여도 우측항을 연산하고 결과값 리턴

=====================================
22.04.27 수 (선행 3일차)

연산
* 대입연산
=, +=, -=, *=, /= ....

* 산술연산
+, -, *, /, %

* 증감연산
++, --

* 비교연산
<, >, <=, >=, ==, !=

* 논리연산
&&, ||, !

* 삼항연산
조건 ? 값1(true) : 값2(false)


if문
if (조건문1-결과값이 boolean!) {
    실행문 1
} else if (조건문2 - 결과값boolean) {
    실행문 2
} else {
    실행문 3
}

else문은 있을 수도 있고, 없을 수도 있음


자동 import 단축키 : ctrl + shift + O (알파벳 O)

폰트 : D2 coding  (Il1| 구분이 쉬움)

자바 버전
1.0
1.2 -> java2
1.5 -> java5
1.7 -> java7 (아직 쓰고 있는 곳 많음)
1.8 (★) (제일 많이 쓰고 있음)
9
10
11 (★)
...
18


for문 구조

for (초기화식(1) ; 조건식(2) ; 증감식(4)) { 
    실행문(3)
}

for문 순서
(1) -> (2) -> (3) -> (4)
    -> (2) -> (3) -> (4)
    -> (2) -> (3) -> (4)
    -> (2) -> (3) -> (4) (조건식이 true일 동안 반복)


while문 구조

while (조건식) {
    실행문	(조건식이 true일 동안 반복)
}

자칫하면 무한반복(loop)에 빠질 수 있음


for : 반복횟수가 정해져 있을 때
while : 반복횟수가 정해져 있지 않을 때


반복문 이름 부여
outer : 
for ( ; ; ) { 

    inner :
    for(   ){
    break outer;
    }

}

for문에 이름을 부여(outer, inner)해서 break문을 사용할 경우 중첩 for문을 한꺼번에 나갈 수 있음

===================================
22.04.28 목 (선행 4일차)
복습방법
클라우드스터딩 : https://cloudstudying.kr/
강의 -> "자바 입문하기!"

컴퓨터 과학 (CS, Computer Science)
 - 네트워크, 자료구조, 알고리즘, 데이터베이스


컴퓨터언어 (compile, interpreter)
compile
 - 소스 -> 기계어(실행)
 - C, C++
 - 속도가 빠름
 - 유지보수 어려움, 번거롭다 (코드 하나 수정해도 "컴파일->실행" 과정을 거쳐야함)

JIT (Just In Time) : Java가 여기에 속함 (+ 현재 버전의 Python, JavaScript)
 - 소스 -> 컴파일(바이너리) -> JVM(실행)
 - compile 장점 + interpreter 장점
 - compile 단점 + interpreter 단점

interpreter
 - 소스(실행) => 소스의 한줄씩 번역해서 실행
 - Python, JavaScript
 - 속도가 느림
 - 유지보수가 쉬움 (compile 언어에 비해서)


여러줄 주석 단축키 : Ctrl+Shift+'/' -> 잘 안씀 (그냥 Ctrl+'/' 를 사용함)

웹개발시에는 패키지를 꼭 만들어야한다! (default package 사용X)

메서드 실행(호출) = method call (같은 의미)

===================================
===================================
22.05.02 국비 첫 수업


취업지원센터 김지은 (070-4907-5726, kimje1415@tjoeun.co.kr)
취업지원서비스는 훈련종료 한달 전부터 진행함 (출결 조건을 만족해야함)

오리엔테이션
서류 작성해서 금일 제출 (훈련생 서약서, 개인정보 동의서, 안전수칙 준수 서약서)


지각, 외출, 조퇴 3번시 결석 1번
수업시간 50%를 만족하지 못하면 당일 결석처리됨
출결방법 불일치시 결석처리 (예 - 카드출석+QR퇴실)
9:40까지 정상입실
6:20부터 정상퇴실 (마지막시간 입력시간으로 퇴실 체크됨)
 - 학원 10시30분까지 운영함

공가처리 (단위기간 출석일수의 10% )
 - 병원 진료확인서 (진단서 필요X, 진료확인서는 무료or 2~3,000원, 다음날까지 제출)
 - 입사시험(면접)
 - 훈련 관련 자격증시험

훈련장려금 : 단위기간 기준 15일 이내 지급

교육과정 설계 취지
 - 자바 개발, 데이터 분석을 구분해서 나누지않고 하나의 범위로 구분
 - 데이터 분석이 가능한 자바 웹 개발자
 - 자바 백엔드 개발자 + 데이터 분석
 - 최근 각광받고 있는 엘라스틱 서치 기술 학습

자바
Java - 기본문법, 연산, 제어문, 객체지향 프로그래밍, 클래스와 객체, 자료구조, 자바API, IO, 쓰레드, 네트워크
SQL - (Oracle, MySQL, 데이터모델링, ERD, DML, DDL 데이터조회, 조인, 서브쿼리)
HTML / CSS / JavaScript - HTML 태그, 속성, CSS 사용법, 선택자, JavaScript 문법, jQuery, Ajax
JSP / Servlet - JSP 문법, 내장 객체, Servlet 설정, 매핑, 세션, 쿠키, EL, JSTL, JDBC
Spring Framework - 의존성 주입(DI, Autowired), AOP, Interceptor, 모델2/MVC구조, MyBatis 연동, RestAPI
Util - Git(소스 버전 관리), Maven(빌드 도구), Junit(테스트 도구)
서버 배포 - AWS 서버 구축, java, tomcat, mysql 설치, 웹 어플리케이션 배포/구동

빅데이터
SQL, 파이썬, 데이터 수집, 데이터 전처리, 데이터 시각화, 기초수학, 머신러닝, 딥러닝, NoSQL, API

SQL - RDBMS 데이터 분석
파이썬 - 기본뭄법, 연산, 제어문, 객체지향프로그래밍, 클래스와 객체, 자료구조, 입출력, 모듈/패키지
데이터 수집 - API, 웹 크롤링, 데이터베이스 연동
데이터 전처리 - Numpy, Pandas, excel/csv 파일 다루기, JSON 파일처리, 결측값, 이상값 처리
데이터 시각화 - matplotlib, seaborn, 시각화 종류 및 시각화 실습
머신러닝 - Tensorflow, ~
API - Flask(파이썬 웹 프레임워크 )서버 구축, API 서버 구현


중요함!!  - Java, SQL, SpringFramework

엘라스틱 서치
 - 오픈소스 검색엔진, 대용량 데이터 저장소
 - 단순 RDBMS 검색이 아닌 비정형 텍스트 색인 검색기능
 - 자동완성 및 초성 검색기능


프로젝트
자바 웹 프로젝트, 데이터 분석, 검색엔진


여유가 있을 때 개인프로젝트 진행하자

SQL 교재 (Do it! 오라클로 배우는 데이터베이스 입문)
★★★ 둘째 마당 : 중요함 
셋째 마당 : 이해정도만 하면 됨
넷째 마당 : SQL로 프로그래밍 하는 법 (수업 X)

dataq.or.kr : 데이터 자격검정 홈페이지

용어 암기 (★★★)
 - 개체(entity) 
 - 속성(attribute)
 - 관계(relationship)

~/workspace/tjoeunacademy_test/ABC쇼핑몰.xlsx
ABC쇼핑몰.xlsx (파일) => DB (schema)
회원(시트) => table
홍길동(데이터) => record, row....


entity(개체) : 데이터화 하려는 사물, 개념의 단위 (회원, 주문내역, 상품리스트) => table
atrribute(속성, 특징) : 엔티티(entity)가 가지는 항목 => 열(column)
relationship(관계) : 개체와 개체간의 연관성 => fk (foreign key, 외래키) 외 다양하게 구현


독립성(independency) <-> 의존성(dependency)
 독립성 : 하위스키마를 변경하더라도 상위스키마가 영향을 받지 않는 특성
특정 스키마가 변경되더라도 다른 계층의 스키마는 변경할 필요가 없음
 
무결성(integrity)
 - 데이터의 정확성, 일관성, 유효성이 유지되는 것을 말함

면접시 물어볼 수 있는 SQL의 분류
 - DQL (Data Query Language) : 데이터를 원하는 방식으로 조회하는 명령어 (DML에 포함되기도 함)
 - DML (Data Manipulation Language) : 데이터를 저장, 수정, 삭제하는 명령어
 - DDL (Data Definition Language) : 데이터 관리를 위해 테이블을 포함한 여러 객체를 생성, 수정, 삭제하는 명령어
 - TCL (Transaction Control Language) : 트랜잭션 데이터의 영구 저장, 취소 등과 관련된 명령어
 - DML (Data Control Language) : 데이터 사용 권환과 관련된 명령어


행 = row = record = tuple(튜플) (실무에서는 row라는 표현을 많이 씀)
열 = column = field = attribute (실무에서는 colums이라는 표현을 많이 씀)

열(column) : 데이터의 종류(자료형), 저장가능한 값의 최대길이 등 저장 조건과 범위를 지정할 수 있음


row, raw 혼동하기 쉬움


기본키 (PK, Primary key) - ★★
보조키
외래키 (FK, Foreign key) - ★★

기본키
- 저장된 행을 식별할 수 있는 유일한 값
- 가장 중요한 키로서 한 table에서 중복되지 않는 값만 가지는 키
- Null 값을 가질 수 없음

보통 개인정보 노출이 가장 적은 데이터를 기본키로 지정함
 - 학번, 아이디, 주민번호 => 학번을 기본키로 지정
 - 일반 웹사이트 => 식별을 위한 회원번호를 기본키로 사용 (외부에 노출은 안하고 내부적으로만 사용함)

보조키 = 대체키(alternate key) = 후보키(candidate key)
 - 기본키가 될 수 있는 후보키, null값이 없는 키

외래키(FK)
 - 특정 테이블에 포함되어있으면서 다른 테이블의 기본키로 지정된 키
 - 데이터의 중복을 피하기 위해서 필요함.

실무에서는 보통 테이블이 수십개에서 수백개, 데이터는 억단위를 넘는 경우가 흔함

일부러 외래키를 정의하지 않고 테이블간에 관계를 "느슨하게" 설계하는 경우도 있음
 -> ex) 회원정보 삭제시 지난주문내역 삭제가 발생하는 것을 막기위함

주민등록번호는 법적으로 수집이 금지되었음 (암호화하더라도 수집하면 안됨)

자료형(Data type) 
 - 주로 쓰는 자료형(★★★) : VARCHAR2, NUMBER, DATE
 - 블로그에 내용을 쓰는 경우(★★) : CLOB ( VARCHAR2는 용량에 한계가 있음)

char(character) - 고정문자열
varchar(variable character) - 가변문자열

scalar(0차원) - vector(1차원) - matrix(2차원, 행렬) - tensor(3차원 이상)
scalar : 

이 외에도 여러가지 자료형이 있음 (컬렉션형 - VARRAY, NESTED TABLE)


객체(Object) - SQL 언어에서는 그저 하나의 단위 정도로 생각하자
p40~41 단어 알아야함 - table, index, view, sequence, synosym, procedure, function, package, trigger

PL/SQL - 변수, 조건문, 반복문과 같은 프로그래밍 언어를 사용할 수 있음
최근 PL/SQL을 안쓰려고 하는 추세임 (사용하는 경우 Oracle에 종속되기 때문, 다른 RDBMS로 갈아타기 어려움)


오라클 데이터베이스 설치 
oracle.com -> Resources -> Downloads -> DB Express -> Oracle Database 21c Express Edition 윈도우 64비트 버전 설치
D:\kdigital_a\oraclexe
비밀번호 : sys1234

Oracle DB는 삭제하는 과정이 복잡함
- 일반적인 삭제 과정을 거친 후 레지스트리 삭제 프로그램으로 청소 진행할 것

SQL developer 설치
oracle.com -> Resources -> Downloads -> SQL Developer (자바 포함된 버전으로)
설치 X, 압축만 풀면 됨

SQL Developer
새로만들기 
- 사용자 이름 : sys
- 롤 : sysdba  (최고관리자 권한)
- 비밀번호 : sys1234
- 호스트 : localhost
- 포트 : 1521
- SID : xe (서비스아이디, 무료버전이라 xe로 고정되어있음)
(위 정보들이 있어야 DB에 접속할 수 있음.)

보기 -> DBA -> 하단 창 추가
DBA 창 -> '+'버튼 -> 이전에 추가한 사용자 이름으로 접속
sys -> 저장영역 -> 테이블스페이스(우클릭) -> 새로만들기
- 파일이름 : TEST
- 파일크기 : 500M
- 자동확장 설정 : 체크표시 (다음크기 100M : 용량이 차면 자동으로 용량 확장하는 설정, 최대크기 : 제한없음)


계정 추가
'다른 사용자' 우클릭 -> 사용자 생성
- 사용자 이름 : TESTUSER (대문자로 해야함)
- 비밀번호 : test1234
- 기본 테이블스페이스 : TEST 선택
- 임시 테이블스페이스 : TEMP 선택
- 부여된 롤 : CONNECT, RESOURCE
- 할당량 : TEST -> '무제한'

적용 클릭시 에러발생
- 원인 : 계정명 앞에 "C##" 시작하는 계정명만 가능
일반이름으로 생성시키는 방법 ↓↓↓
- sys 워크시트에서 명령어 실행 - alter session set "_oracle_script"=true;


새로운 접속정보 생성
새로만들기 
- 사용자이름 : testuser
- 비밀번호 : test1234
- 롤은 그대로 (기본값)

사용해본 명령어
- desc emp;
- select * from emp;

sql은 대소문자 구별 없음
워크시트 내용 저장할 필요 없음

========================================
22.05.03 화 - 2일차

SQL 주석 
방법 1 : -- 한줄 주석
방법 2
/*
여러줄 주석
*/


SQL문 실행에 띄어쓰기/줄바꿈은 아무런 문제가 없다.

(가독성을 위해서)
보통 SQL명령문은 대문자, 그외(테이블명, 열이름)는 소문자로 쓴다 
줄바꿈/들여쓰기를 한다
실무에서 프로그래밍언어와 구분하기 위해 SQL문 전체를 대문자로 사용하는 경우도 있음.


DML (Data Manipulation Language) : 데이터 관련 명령어
- 데이터 조작 언어
- 데이터를 조회(DQL), 등록, 수정, 삭제

DDL (Definition) : 테이블 관련 명령어
- 데이터 정의 언어
- 테이블 생성, 변경, 삭제

DCL (Control) : 데이터베이스 권한 관련 명령어
- 데이터 제어 언어
- 데이터베이스 접근권한 제어

TCL (Transaction Control Language)
- 트랜잭션(논리적 작업 단위) 제어
(트랜잭션 : 논리적 기능을 수행하기 위에 한번에 작업되어야 하는 일련의 연산단위(?))


4-1 SELECT문
SELECT : 데이터를 조회하는 데 사용되는 명령어

테이블 탭에서 중요하게 봐야할 하위탭 : "데이터", "제약조건"

JOIN : 테이블끼리 또는 테이블과 같은 다른 요소(뷰, view)를 활용하여 JOIN문을 활용할 수 있음.

Select문 사용할 때 고려사항
- 어디에서 가져올 것인지 (어떤 table)
- 어떻게 가져올지 (전체, 일부 column)
- 어떤 값을 출력할지 (where)

기본구조
SELECT 열이름 [AS 별칭], .... 
FROM 테이블명
[WHERE 조건식]
[ORDER BY 열이름 [ASC or DESE]]

[ ] : 생략이 가능(모든 경우는 아니나 생략이 가능하다는 뜻으로 사용되는 경우가 많음)

";" : 문장 구분을 위해서 필요함 (한개의 문장을 실행할 때에는 ';' 가 없어도 됨)


DISTINCT : 조회할 때 중복값을 제거

SELECT 컬럼 FROM 테이블 GROUP BY 그룹화할 컬럼;   -> 잘 안씀

select ename, sal, comm, sal*12+comm as 연봉 from emp;  
-- as 별칭을 부여할 때 사용 
-- comm값에 null값이 포함되어서 null값으로 출력됨 (null 값은 연산 불가)

-- null이면 0으로 처리해주는 함수 : NVL(a , b)    (a = 열 이름, b= null값이 반환할 값)
select ename, sal, comm, sal*12+NVL(comm, 0) as 연봉 from emp;
select comm, nvl(comm, 0) from emp;

as (별칭, alias)
- 별칭에 띄어쓰기가 있는 경우 큰따옴표(" ")로 묶어서 사용
- 써도 되고 안써도되나 가독성 때문에 잘 안씀


ORDER BY
- 정렬의 기본값은 ASC (오름차순)

SELECT *
FROM emp
ORDER BY deptno ASC, sal DESC;
 - 선언한 순서대로 정렬 1순위, 2순위

정렬을 사용(ORDER BY)하는 것이 속도를 깎아먹는 주 요인임 => index를 사용하는 경우 일정부분 해소가 가능함
그러나 정렬을 하지 않는 경우는 거의 없음

ORDER BY는 항상 문장 맨 끝에 와야함


2022 개발자 설문조사
https://programmers.co.kr/pages/2022-dev-survey

프로그래머스 코딩테스트 -> SQL 고득점 Kit


쇼핑몰, 금융권, 교육기관 : 프로젝트를 해본 경험이 있는게 좋음

WHERE 조건식 : 해당 조건에 true인 것만 선택해서 출력함
SELECT * FROM emp WHERE deptno = 30;

AND / OR
WHERE문에 여러개의 조건식을 사용할 수 있다.

AND (그리고)
A AND B : A가 참이고 B도 참이면 결과는 참 (둘다 참 -> 참)
OR (또는)
A OR B : A가 참이거나 또는 B가 참이면 결과 참 (둘 중 하나 이상이 참 -> 참)

성별이 여자 AND 나이가 30 이상 = 여자이면서 30 이상
성별이 여자 OR 나이가 30 이상 = 여자/30미만(30이상), 남자/30이상

SELECT * FROM emp WHERE deptno = 30 AND job = 'SALESMAN';
테이블 안에 들어있는 문자열 데이터는 대,소문자를 구별한다!
 - 데이터 값이 대문자이면 대문자로 조건문 작성, 소문자이면 소문자로 조건문 작성


SQL문은 나머지연산을 제공하지 않음. 사칙연산(+, -, *, /)만 가능


!=, <>, ^= : 같은 의미로 사용되는 연산자 (A != B : A와 B가 같지 않는 경우)
"NOT 조건식" 의 형태가 사용되기도 함

IN 연산자 : OR 연산자의 중복사용을 막을 수 있음

BETWEEN 연산자 a AND b 
- a와 b 사이의 값 (a값, b값 포함됨)

-날짜 검색도 BETWEEN 연산으로 가능하다
1981년 입사한 직원
SELECT * FROM emp WHERE hiredate BETWEEN '1981-01-01' and '1981-12-31';

날짜 표시형식 변경방법
 - 도구 -> 환경설정 -> 데이터베이스 -> NLS -> 날짜형식 변경
RR/MM/DD 또는 RRRR-MM-DD 등 가능


AND -> BETWEEN
OR -> IN


LIKE (★★)
- 텍스트 검색할때 주로 사용되는 연산자 ( '_', '%')
- 주로 % 만 사용됨
- 데이터 조회 속도가 느려지는 원인이 됨

김
김구
김구라

LIKE '김_'  -> 조회 데이터 (김구)
LIKE '김%' -> 조회 데이터 (김, 김구, 김구라)



-- NULL 값인 것만 출력하기 (IS NULL)    ★★★
SELECT ename, sal, comm FROM emp WHERE comm IS NULL;

-- NULL 값 제외하고 출력하기 (IS NOT NULL)   ★★★
SELECT ename, sal, comm FROM emp WHERE comm IS NOT NULL;

에러가 나지 않기때문에 SQL문이 잘못됐는지 확인하기 어렵다
사용법을 제대로 익혀두자

집합연산자 (UNION, UNION ALL, MINUS, INTERSECT)

UNION : 합집합, 중복제거
UNION ALL: 합집합, 중복값 출력 (실무에서는 UNION ALL을 많이 씀)
MINUS : 차집합
INTERSECT : 교집합

자유게시판, 유머게시판

최근게시물
제목, 작성일이 같아도 둘다 출력되게끔함! (자유게시판, 유머게시판)


6장 함수
SQL은 거의 동일하지만 함수는 DB마다 다른 경우들이 있음.
함수도 대소문자 구분 X

UPPER()
LOWER()
LENGTH()

dual 테이블  -> 더미(dummy) 테이블 (임시연산이나 함수의 결과값 확인을 위해 사용됨)
SELECT sysdate from dual; 
- 현재 날짜를 보고 싶을 때 dual 테이블을 이용해서 간편하게 확인함

SUBSTR()   -> (substr/ing)
"안녕하세요"
"안녕", "안녕하"

SUBSTR(문자열 데이터, 시작위치, 추출길이)
SUBSTR(문자열 데이터, 시작위치)

INSTR() -> 문자열 데이터 안에서 특정 문자 위치를 찾는 함수
Oracle index는 1부터 시작함!

REPLACE() : 자주 사용됨 (프로그래밍 언어에서도 사용됨)
- 특정 문자를 바꾸는데 사용

TRIM, LTRIM, RTRIM
-- 원래 특정 문자를 trim하는 용도로 사용함 (잘 사용 안함)
-- 주로 공백을 제거하는 용도로 사용됨
TRIM
-- both : 왼쪽+오른쪽, leading : 왼쪽, trailing : 오른쪽
'서울시'
'       서울시'
'서울시         '

LPAD, RPAD : 빈공간을 특정 문자로 채워줌

CONCAT : 두 문자열을 합치는 함수
 - oracle에서는 '||' 연산자가 동일한 기능을 함, 매우 편리하나 사용하지 않는게 좋음







자물쇠